
worker_processes  1;
daemon off;
error_log stderr debug;
events {
	worker_connections 1024;
}

env ETCD_URL;
env COREINIT_UNIT;

http {
	lua_package_path './lib/?.lua;;';
	lua_shared_dict lb 10m;

	init_by_lua '
	';

	server {
		listen 8080;

		location / {
			set $_url "";
			set $best_upstream "";

			lua_need_request_body on;

			access_by_lua '
				local shlb = ngx.shared.lb
				local insync = shlb:get("insync")
				if insync ~= true then
					shlb:set("insync", true, 1)
					local loadbalancer = require("coreinit/loadbalancer")
					lb = loadbalancer:new{
						etcd=os.getenv("ETCD_URL"),
						unit=os.getenv("COREINIT_UNIT")
					}
					-- TOOD: use a long poll with etcd instead of this hack of caching for 1 second
					local err = lb:sync()
					if err ~= nil then
						print("Error syncing loadbalancer " .. err.errorCode)
					else
						-- TODO: dont call etcd on every request
						ngx.var.best_upstream = lb:upstream()
						shlb:set("upstream", ngx.var.best_upstream)
						ngx.log(ngx.INFO, "Setting upstream to " .. ngx.var.best_upstream)
					end
				end
				ngx.var.best_upstream = shlb:get("upstream")
				ngx.log(ngx.INFO, "Upstream is " .. ngx.var.best_upstream)
			';

			proxy_pass $best_upstream;
		}

		location /proxy {
			internal;
			rewrite_by_lua "
			  local req = ngx.req

			  for k,v in pairs(req.get_headers()) do
			    if k ~= 'content-length' then
			      req.clear_header(k)
			    end
			  end

			  if ngx.ctx.headers then
			    for k,v in pairs(ngx.ctx.headers) do
			      req.set_header(k, v)
			    end
			  end
			";

			resolver 8.8.8.8;
			proxy_http_version 1.1;
			proxy_pass $_url;
		}
	}
}
