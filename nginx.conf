
worker_processes  1;
daemon off;
error_log stderr debug;
events {
	worker_connections 1024;
}

env ETCD_URL;
env COREINIT_UNIT;

http {
	lua_package_path './lib/?.lua;;';
	lua_shared_dict lb 10m;

	init_by_lua '
	';

	server {
		listen 8080;

		location / {
			set $_url "";
			set $best_upstream "";

			lua_need_request_body on;

			access_by_lua '
				local shlb = ngx.shared.lb
				local function set_upstream(premature)
					local insync = shlb:get("insync")
					if insync ~= true then
						shlb:set("insync", true, 1)
						local loadbalancer = require("coreinit/loadbalancer")
						lb = loadbalancer:new{
							etcd=os.getenv("ETCD_URL"),
							unit=os.getenv("COREINIT_UNIT")
						}
						-- TOOD: use a long poll with etcd instead of this hack of caching for 1 second
						local err = lb:sync()
						if err ~= nil then
							print("Error syncing loadbalancer " .. err.errorCode)
						else
							-- TODO: dont call etcd on every request
							local upstream = lb:upstream()
							shlb:set("upstream", upstream)
							print("Setting upstream to " .. upstream)
						end
					end
				end
				local ok, err = ngx.timer.at(0, set_upstream)
				if not ok then
					ngx.log(ngx.ERR, "failed to create timer: ", err)
					return
				end

				ngx.var.best_upstream = shlb:get("upstream")
				ngx.log(ngx.INFO, "Upstream is " .. ngx.var.best_upstream)
			';

			proxy_pass $best_upstream;
		}
	}
}
